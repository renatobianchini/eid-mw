/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace be.belgium.eid {

using System;
using System.Runtime.InteropServices;

/// <summary>Abstract base class for all the documents.</summary>
public class BEID_XMLDoc : BEID_Object {
  private HandleRef swigCPtr;

  internal BEID_XMLDoc(IntPtr cPtr, bool cMemoryOwn) : base(beidlib_dotNetPINVOKE.BEID_XMLDocUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BEID_XMLDoc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BEID_XMLDoc() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        beidlib_dotNetPINVOKE.delete_BEID_XMLDoc(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>The document is allowed</summary>
  public virtual bool isAllowed() {
    bool ret = beidlib_dotNetPINVOKE.BEID_XMLDoc_isAllowed(swigCPtr);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Return the document in an XML format</summary>
  public virtual BEID_ByteArray getXML() {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_XMLDoc_getXML(swigCPtr), true);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Return the document in an CSV format</summary>
  public virtual BEID_ByteArray getCSV() {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_XMLDoc_getCSV(swigCPtr), true);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Return the document in an TLV format</summary>
  public virtual BEID_ByteArray getTLV() {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_XMLDoc_getTLV(swigCPtr), true);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Write the xml document into the file csFilePath</summary>
  /// <returns>true if succeede</returns> d
  public virtual bool writeXmlToFile(string csFilePath) {
    bool ret = beidlib_dotNetPINVOKE.BEID_XMLDoc_writeXmlToFile(swigCPtr, csFilePath);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Write the csv document into the file csFilePath	 </summary>
  /// <returns>true if succeeded</returns> 
  public virtual bool writeCsvToFile(string csFilePath) {
    bool ret = beidlib_dotNetPINVOKE.BEID_XMLDoc_writeCsvToFile(swigCPtr, csFilePath);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Write the tlv document into the file csFilePath</summary>
  /// <returns>true if succeeded </returns> 
  public virtual bool writeTlvToFile(string csFilePath) {
    bool ret = beidlib_dotNetPINVOKE.BEID_XMLDoc_writeTlvToFile(swigCPtr, csFilePath);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

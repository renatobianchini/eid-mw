/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace be.belgium.eid {

using System;
using System.Runtime.InteropServices;

/// <summary>
/// This class represents a SIS card.
/// To get such an object you have to ask it from the ReaderContext.
/// </summary>
public class BEID_SISCard : BEID_MemoryCard {
  private HandleRef swigCPtr;

  internal BEID_SISCard(IntPtr cPtr, bool cMemoryOwn) : base(beidlib_dotNetPINVOKE.BEID_SISCardUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BEID_SISCard obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BEID_SISCard() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        beidlib_dotNetPINVOKE.delete_BEID_SISCard(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary> 
  /// Return a document from the card.
  /// </summary>
  /// <remarks>
  /// Throw BEID_ExDocTypeUnknown exception if the document doesn't exist for this card. 
  /// </remarks>
  public override BEID_XMLDoc getDocument(BEID_DocumentType type)
  {
	switch(type)
	{
	case BEID_DocumentType.BEID_DOCTYPE_FULL:
		return getFullDoc();
	case BEID_DocumentType.BEID_DOCTYPE_ID:
		return getID();
	default:
		throw new BEID_ExDocTypeUnknown();
	}
}

  /// <summary>Get the full document.</summary>
  public BEID_SisFullDoc getFullDoc() {
    BEID_SisFullDoc ret = new BEID_SisFullDoc(beidlib_dotNetPINVOKE.BEID_SISCard_getFullDoc(swigCPtr), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Get the id document.</summary>
  public BEID_SisId getID()
  {
    BEID_SisId ret = new BEID_SisId(beidlib_dotNetPINVOKE.BEID_SISCard_getID(swigCPtr), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Return a raw data from the card.
  /// <remarks>
  /// Throw BEID_ExFileTypeUnknown exception if the document doesn't exist for this card. 
  /// </remarks>
  public override BEID_ByteArray getRawData(BEID_RawDataType type)
  {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_SISCard_getRawData(swigCPtr, (int)type), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>Get the id RawData.</summary>
  public BEID_ByteArray getRawData_Id()
  {
    BEID_ByteArray ret = new BEID_ByteArray(beidlib_dotNetPINVOKE.BEID_SISCard_getRawData_Id(swigCPtr), false);
    if (beidlib_dotNetPINVOKE.SWIGPendingException.Pending) throw beidlib_dotNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

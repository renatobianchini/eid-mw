/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EidViewerGUI.java
 *
 * Created on Nov 8, 2010, 1:49:47 PM
 */
package be.fedict.eidviewer.gui;

import be.fedict.eid.applet.DiagnosticTests;
import be.fedict.eid.applet.Messages;
import be.fedict.eid.applet.Messages.MESSAGE_ID;
import be.fedict.eid.applet.Status;
import be.fedict.eid.applet.View;
import be.fedict.eid.applet.service.Address;
import be.fedict.eid.applet.service.Identity;
import be.fedict.eidviewer.lib.Eid;
import be.fedict.eidviewer.lib.EidFactory;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.text.DateFormat;
import java.util.Locale;
import java.util.Observable;
import java.util.Observer;
import javax.swing.ImageIcon;

/**
 *
 * @author frank
 */
public class EidViewerGUI extends javax.swing.JFrame implements View, Observer
{
    private static final String UNKNOWN_VALUE_TEXT="";
    
    /** Creates new form EidViewerGUI */
    public EidViewerGUI()
    {
        initCardHandler();
        initComponents();
        initOtherComponents();

       

        //idProgressBar.setMinimum(0);
        //idProgressBar.setMaximum(10);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        tabPane = new javax.swing.JTabbedPane();
        idPane = new javax.swing.JPanel();
        idPhotoLabel = new javax.swing.JLabel();
        idNameLabel = new javax.swing.JLabel();
        idGivenNamesLabel = new javax.swing.JLabel();
        idPlaceOfBirthLabel = new javax.swing.JLabel();
        idDateOfBirthLabel = new javax.swing.JLabel();
        idSexlabel = new javax.swing.JLabel();
        idNationalityLabel = new javax.swing.JLabel();
        idNationalNumberLabel = new javax.swing.JLabel();
        idStreetLabel = new javax.swing.JLabel();
        idMunicipalityLabel = new javax.swing.JLabel();
        idZipCodeLabel = new javax.swing.JLabel();
        idCountryLabel = new javax.swing.JLabel();
        idTitleLabel = new javax.swing.JLabel();
        idSpecialStatusLabel = new javax.swing.JLabel();
        idIdentityAddressSeparator = new javax.swing.JSeparator();
        idGivenNames = new javax.swing.JLabel();
        idName = new javax.swing.JLabel();
        idPlaceOfBirth = new javax.swing.JLabel();
        idDateOfBirth = new javax.swing.JLabel();
        idSex = new javax.swing.JLabel();
        idNationality = new javax.swing.JLabel();
        idNationalNumber = new javax.swing.JLabel();
        idTitle = new javax.swing.JLabel();
        idSpecialStatus = new javax.swing.JLabel();
        idStreet = new javax.swing.JLabel();
        idZipCode = new javax.swing.JLabel();
        idMunicipality = new javax.swing.JLabel();
        idCountry = new javax.swing.JLabel();
        idIdentityBusyIcon = new javax.swing.JLabel();
        idAddressBusyIcon = new javax.swing.JLabel();
        cardPane = new javax.swing.JPanel();
        cardNumberLabel = new javax.swing.JLabel();
        cardValidFromLabel = new javax.swing.JLabel();
        cardValidToLabel = new javax.swing.JLabel();
        cardChipNumberLabel = new javax.swing.JLabel();
        cardPlaceOfIssueLabel = new javax.swing.JLabel();
        cardLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        jLabel2.setName("jLabel2"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 450));
        setName("Form"); // NOI18N

        tabPane.setName("tabPane"); // NOI18N

        idPane.setName("identityPane"); // NOI18N
        idPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                idPaneComponentShown(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(EidViewerGUI.class);
        idPhotoLabel.setBackground(resourceMap.getColor("idPhotoLabel.background")); // NOI18N
        idPhotoLabel.setForeground(resourceMap.getColor("idPhotoLabel.foreground")); // NOI18N
        idPhotoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        idPhotoLabel.setIcon(resourceMap.getIcon("idPhotoLabel.icon")); // NOI18N
        idPhotoLabel.setText(resourceMap.getString("idPhotoLabel.text")); // NOI18N
        idPhotoLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        idPhotoLabel.setFocusable(false);
        idPhotoLabel.setMaximumSize(new java.awt.Dimension(140, 200));
        idPhotoLabel.setMinimumSize(new java.awt.Dimension(140, 200));
        idPhotoLabel.setName("idPhotoLabel"); // NOI18N
        idPhotoLabel.setOpaque(true);
        idPhotoLabel.setPreferredSize(new java.awt.Dimension(140, 200));

        idNameLabel.setText(resourceMap.getString("idNameLabel.text")); // NOI18N
        idNameLabel.setName("idNameLabel"); // NOI18N

        idGivenNamesLabel.setText(resourceMap.getString("idGivenNamesLabel.text")); // NOI18N
        idGivenNamesLabel.setName("idGivenNamesLabel"); // NOI18N

        idPlaceOfBirthLabel.setText(resourceMap.getString("idPlaceOfBirthLabel.text")); // NOI18N
        idPlaceOfBirthLabel.setName("idPlaceOfBirthLabel"); // NOI18N

        idDateOfBirthLabel.setText(resourceMap.getString("idDateOfBirthLabel.text")); // NOI18N
        idDateOfBirthLabel.setName("idDateOfBirthLabel"); // NOI18N

        idSexlabel.setText(resourceMap.getString("idSexLabel.text")); // NOI18N
        idSexlabel.setName("idSexLabel"); // NOI18N

        idNationalityLabel.setText(resourceMap.getString("idNationalityLabel.text")); // NOI18N
        idNationalityLabel.setName("idNationalityLabel"); // NOI18N

        idNationalNumberLabel.setText(resourceMap.getString("idNationalNumberLabel.text")); // NOI18N
        idNationalNumberLabel.setName("idNationalNumberLabel"); // NOI18N

        idStreetLabel.setText(resourceMap.getString("idStreetLabel.text")); // NOI18N
        idStreetLabel.setName("idStreetLabel"); // NOI18N

        idMunicipalityLabel.setText(resourceMap.getString("idMunicipalityLabel.text")); // NOI18N
        idMunicipalityLabel.setName("idMunicipalityLabel"); // NOI18N

        idZipCodeLabel.setText(resourceMap.getString("idZipCodeLabel.text")); // NOI18N
        idZipCodeLabel.setName("idZipCodeLabel"); // NOI18N

        idCountryLabel.setText(resourceMap.getString("idCountryLabel.text")); // NOI18N
        idCountryLabel.setName("idCountryLabel"); // NOI18N

        idTitleLabel.setText(resourceMap.getString("idTitleLabel.text")); // NOI18N
        idTitleLabel.setName("idTitleLabel"); // NOI18N

        idSpecialStatusLabel.setText(resourceMap.getString("idSpecialStatusLabel.text")); // NOI18N
        idSpecialStatusLabel.setName("idSpecialStatusLabel"); // NOI18N

        idIdentityAddressSeparator.setName("idIdentityAddressSeparator"); // NOI18N

        idGivenNames.setText(resourceMap.getString("idGivenNames.text")); // NOI18N
        idGivenNames.setName("idGivenNames"); // NOI18N

        idName.setText(resourceMap.getString("idName.text")); // NOI18N
        idName.setName("idName"); // NOI18N

        idPlaceOfBirth.setText(resourceMap.getString("idPlaceOfBirth.text")); // NOI18N
        idPlaceOfBirth.setName("idPlaceOfBirth"); // NOI18N

        idDateOfBirth.setText(resourceMap.getString("idDateOfBirth.text")); // NOI18N
        idDateOfBirth.setName("idDateOfBirth"); // NOI18N

        idSex.setText(resourceMap.getString("idSex.text")); // NOI18N
        idSex.setName("idSex"); // NOI18N

        idNationality.setText(resourceMap.getString("idNationality.text")); // NOI18N
        idNationality.setName("idNationality"); // NOI18N

        idNationalNumber.setText(resourceMap.getString("idNationalNumber.text")); // NOI18N
        idNationalNumber.setName("idNationalNumber"); // NOI18N

        idTitle.setText(resourceMap.getString("idTitle.text")); // NOI18N
        idTitle.setName("idTitle"); // NOI18N

        idSpecialStatus.setText(resourceMap.getString("idSpecialStatus.text")); // NOI18N
        idSpecialStatus.setName("idSpecialStatus"); // NOI18N

        idStreet.setText(resourceMap.getString("idStreet.text")); // NOI18N
        idStreet.setName("idStreet"); // NOI18N

        idZipCode.setText(resourceMap.getString("idZipCode.text")); // NOI18N
        idZipCode.setName("idZipCode"); // NOI18N

        idMunicipality.setText(resourceMap.getString("idMunicipality.text")); // NOI18N
        idMunicipality.setName("idMunicipality"); // NOI18N

        idCountry.setText(resourceMap.getString("idCountry.text")); // NOI18N
        idCountry.setName("idCountry"); // NOI18N

        idIdentityBusyIcon.setIcon(resourceMap.getIcon("idIdentityBusyIcon.icon")); // NOI18N
        idIdentityBusyIcon.setText(resourceMap.getString("idIdentityBusyIcon.text")); // NOI18N
        idIdentityBusyIcon.setName("idIdentityBusyIcon"); // NOI18N

        idAddressBusyIcon.setIcon(resourceMap.getIcon("idAddressBusyIcon.icon")); // NOI18N
        idAddressBusyIcon.setName("idAddressBusyIcon"); // NOI18N

        javax.swing.GroupLayout idPaneLayout = new javax.swing.GroupLayout(idPane);
        idPane.setLayout(idPaneLayout);
        idPaneLayout.setHorizontalGroup(
            idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idPaneLayout.createSequentialGroup()
                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(idPaneLayout.createSequentialGroup()
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(idPaneLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(idPhotoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idNameLabel)
                                    .addComponent(idGivenNamesLabel)
                                    .addComponent(idPlaceOfBirthLabel)
                                    .addComponent(idDateOfBirthLabel)
                                    .addComponent(idSexlabel)
                                    .addComponent(idNationalityLabel)
                                    .addComponent(idNationalNumberLabel)
                                    .addComponent(idTitleLabel)
                                    .addComponent(idSpecialStatusLabel))
                                .addGap(29, 29, 29)
                                .addComponent(idIdentityBusyIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(idPaneLayout.createSequentialGroup()
                                .addGap(219, 219, 219)
                                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(idPaneLayout.createSequentialGroup()
                                        .addComponent(idCountryLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE))
                                    .addGroup(idPaneLayout.createSequentialGroup()
                                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(idZipCodeLabel)
                                            .addComponent(idStreetLabel)
                                            .addComponent(idMunicipalityLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                        .addComponent(idAddressBusyIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idZipCode, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idMunicipality, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idCountry, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idStreet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idGivenNames, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idPlaceOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idDateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idNationality, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idSpecialStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idNationalNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(idSex, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)))
                    .addGroup(idPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(idIdentityAddressSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)))
                .addContainerGap())
        );
        idPaneLayout.setVerticalGroup(
            idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idNameLabel)
                    .addComponent(idName))
                .addGap(8, 8, 8)
                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(idPhotoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(idPaneLayout.createSequentialGroup()
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(idIdentityBusyIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(idPaneLayout.createSequentialGroup()
                                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idGivenNamesLabel)
                                    .addComponent(idGivenNames))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idPlaceOfBirthLabel)
                                    .addComponent(idPlaceOfBirth))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idDateOfBirthLabel)
                                    .addComponent(idDateOfBirth))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idSexlabel)
                                    .addComponent(idSex))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idNationalityLabel)
                            .addComponent(idNationality))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idNationalNumberLabel)
                            .addComponent(idNationalNumber))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idTitleLabel)
                            .addComponent(idTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idSpecialStatusLabel)
                            .addComponent(idSpecialStatus))))
                .addGap(26, 26, 26)
                .addComponent(idIdentityAddressSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(idPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idStreet)
                            .addComponent(idStreetLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idZipCode)
                            .addComponent(idZipCodeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idMunicipality)
                            .addComponent(idMunicipalityLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(idPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idCountry)
                            .addComponent(idCountryLabel)))
                    .addGroup(idPaneLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(idAddressBusyIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        idPhotoLabel.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel1.AccessibleContext.accessibleName")); // NOI18N
        idPhotoLabel.getAccessibleContext().setAccessibleDescription(resourceMap.getString("jLabel1.AccessibleContext.accessibleDescription")); // NOI18N

        tabPane.addTab(resourceMap.getString("identityPane.TabConstraints.tabTitle"), idPane); // NOI18N

        cardPane.setName("cardPane"); // NOI18N

        cardNumberLabel.setText(resourceMap.getString("cardNumberLabel.text")); // NOI18N
        cardNumberLabel.setName("cardNumberLabel"); // NOI18N

        cardValidFromLabel.setText(resourceMap.getString("cardValidFromLabel.text")); // NOI18N
        cardValidFromLabel.setName("cardValidFromLabel"); // NOI18N

        cardValidToLabel.setText(resourceMap.getString("cardValidToLabel.text")); // NOI18N
        cardValidToLabel.setName("cardValidToLabel"); // NOI18N

        cardChipNumberLabel.setText(resourceMap.getString("cardChipNumberLabel.text")); // NOI18N
        cardChipNumberLabel.setName("cardChipNumberLabel"); // NOI18N

        cardPlaceOfIssueLabel.setText(resourceMap.getString("cardPlaceOfIssueLabel.text")); // NOI18N
        cardPlaceOfIssueLabel.setName("cardPlaceOfIssueLabel"); // NOI18N

        cardLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cardLabel.setEnabled(false);
        cardLabel.setFocusable(false);
        cardLabel.setMaximumSize(new java.awt.Dimension(140, 200));
        cardLabel.setMinimumSize(new java.awt.Dimension(140, 200));
        cardLabel.setName("cardLabel"); // NOI18N
        cardLabel.setOpaque(true);
        cardLabel.setPreferredSize(new java.awt.Dimension(140, 200));

        javax.swing.GroupLayout cardPaneLayout = new javax.swing.GroupLayout(cardPane);
        cardPane.setLayout(cardPaneLayout);
        cardPaneLayout.setHorizontalGroup(
            cardPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardPaneLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(cardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(cardPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardValidFromLabel)
                    .addComponent(cardNumberLabel)
                    .addComponent(cardValidToLabel)
                    .addComponent(cardChipNumberLabel)
                    .addComponent(cardPlaceOfIssueLabel))
                .addContainerGap(544, Short.MAX_VALUE))
        );
        cardPaneLayout.setVerticalGroup(
            cardPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardPaneLayout.createSequentialGroup()
                .addGroup(cardPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cardPaneLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(cardNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cardValidFromLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cardValidToLabel)
                        .addGap(12, 12, 12)
                        .addComponent(cardChipNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cardPlaceOfIssueLabel))
                    .addGroup(cardPaneLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(cardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(241, Short.MAX_VALUE))
        );

        tabPane.addTab(resourceMap.getString("cardPane.TabConstraints.tabTitle"), cardPane); // NOI18N

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N

        cutMenuItem.setText(resourceMap.getString("cutMenuItem.text")); // NOI18N
        cutMenuItem.setName("cutMenuItem"); // NOI18N
        editMenu.add(cutMenuItem);

        copyMenuItem.setText(resourceMap.getString("copyMenuItem.text")); // NOI18N
        copyMenuItem.setName("copyMenuItem"); // NOI18N
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText(resourceMap.getString("pasteMenuItem.text")); // NOI18N
        pasteMenuItem.setName("pasteMenuItem"); // NOI18N
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText(resourceMap.getString("deleteMenuItem.text")); // NOI18N
        deleteMenuItem.setName("deleteMenuItem"); // NOI18N
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void idPaneComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_idPaneComponentShown
    {//GEN-HEADEREND:event_idPaneComponentShown
        mEidController.addObserver(this);
        mEidController.start();
    }//GEN-LAST:event_idPaneComponentShown


    private void fillIdentity(final Identity identity, final boolean loading)
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                idIdentityBusyIcon.setVisible(loading);
                
                if(identity!=null)
                {
                    idName.setText(identity.getName());
                    idGivenNames.setText(identity.getFirstName() + " " + identity.getMiddleName());
                    idPlaceOfBirth.setText(identity.getPlaceOfBirth());
                    idDateOfBirth.setText(mDateFormat.format(identity.getDateOfBirth().getTime()));
                    idSex.setText(identity.getGender().name());
                    idNationality.setText(identity.getNationality());
                    idNationalNumber.setText(identity.getNationalNumber());
                    idTitle.setText(identity.getNobleCondition());
                    idSpecialStatus.setText(identity.getSpecialStatus().name());
                }
                else
                {
                    idName.setText          (UNKNOWN_VALUE_TEXT);
                    idGivenNames.setText    (UNKNOWN_VALUE_TEXT);
                    idPlaceOfBirth.setText  (UNKNOWN_VALUE_TEXT);
                    idDateOfBirth.setText   (UNKNOWN_VALUE_TEXT);
                    idSex.setText           (UNKNOWN_VALUE_TEXT);
                    idNationality.setText   (UNKNOWN_VALUE_TEXT);
                    idNationalNumber.setText(UNKNOWN_VALUE_TEXT);
                    idTitle.setText         (UNKNOWN_VALUE_TEXT);
                    idSpecialStatus.setText (UNKNOWN_VALUE_TEXT);
                    
                }
            }
        });
    }

    private void fillAddress(final Address address, final boolean loading)
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                idAddressBusyIcon.setVisible(loading);
                
                if(address!=null)
                {
                    idStreet.setText(address.getStreetAndNumber());
                    idZipCode.setText(address.getZip());
                    idMunicipality.setText(address.getMunicipality());
                }
                else
                {
                    idStreet.setText        (UNKNOWN_VALUE_TEXT);
                    idZipCode.setText       (UNKNOWN_VALUE_TEXT);
                    idMunicipality.setText  (UNKNOWN_VALUE_TEXT);
                    
                }
            }
        });
    }

    private void fillPhoto(final Image photo, final boolean loading)
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                if(photo!=null)
                {
                    idPhotoLabel.setIcon(new ImageIcon(photo));
                }
                else
                {
                   if(loading)
                   {
                       URL url=EidViewerGUI.class.getResource("resources/busyicons/busy_anim_large.gif");
                       if(url!=null)
                                idPhotoLabel.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().getImage(url)));
                   }
                   else
                   {
                       idPhotoLabel.setIcon(null);
                   }
                }
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new EidViewerGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JLabel cardChipNumberLabel;
    private javax.swing.JLabel cardLabel;
    private javax.swing.JLabel cardNumberLabel;
    private javax.swing.JPanel cardPane;
    private javax.swing.JLabel cardPlaceOfIssueLabel;
    private javax.swing.JLabel cardValidFromLabel;
    private javax.swing.JLabel cardValidToLabel;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel idAddressBusyIcon;
    private javax.swing.JLabel idCountry;
    private javax.swing.JLabel idCountryLabel;
    private javax.swing.JLabel idDateOfBirth;
    private javax.swing.JLabel idDateOfBirthLabel;
    private javax.swing.JLabel idGivenNames;
    private javax.swing.JLabel idGivenNamesLabel;
    private javax.swing.JSeparator idIdentityAddressSeparator;
    private javax.swing.JLabel idIdentityBusyIcon;
    private javax.swing.JLabel idMunicipality;
    private javax.swing.JLabel idMunicipalityLabel;
    private javax.swing.JLabel idName;
    private javax.swing.JLabel idNameLabel;
    private javax.swing.JLabel idNationalNumber;
    private javax.swing.JLabel idNationalNumberLabel;
    private javax.swing.JLabel idNationality;
    private javax.swing.JLabel idNationalityLabel;
    private javax.swing.JPanel idPane;
    private javax.swing.JLabel idPhotoLabel;
    private javax.swing.JLabel idPlaceOfBirth;
    private javax.swing.JLabel idPlaceOfBirthLabel;
    private javax.swing.JLabel idSex;
    private javax.swing.JLabel idSexlabel;
    private javax.swing.JLabel idSpecialStatus;
    private javax.swing.JLabel idSpecialStatusLabel;
    private javax.swing.JLabel idStreet;
    private javax.swing.JLabel idStreetLabel;
    private javax.swing.JLabel idTitle;
    private javax.swing.JLabel idTitleLabel;
    private javax.swing.JLabel idZipCode;
    private javax.swing.JLabel idZipCodeLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables
    private Messages        mMessages;
    private Eid             mEid;
    private EidController   mEidController;
    private DateFormat      mDateFormat;

    private void initCardHandler()
    {
        mMessages = new Messages(Locale.ENGLISH);
        mEid=EidFactory.getEidImpl(this, mMessages);
        mDateFormat = DateFormat.getDateInstance(DateFormat.DEFAULT, Locale.getDefault());
        mEidController = new EidController(mEid);
    }

    public void addDetailMessage(String detailMessage)
    {
        System.err.println(detailMessage);
    }

    public void setStatusMessage(Status status, MESSAGE_ID messageId)
    {
        String message=mMessages.getMessage(messageId);
        System.err.println(message);

        setStatusMessage(message);
    }

    private void setStatusMessage(final String message)
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                //idStatus.setText(message);
            }
        });
    }

    public boolean privacyQuestion(boolean includeAddress, boolean includePhoto, String identityDataUsage)
    {
        return true;
    }

    public Component getParentComponent()
    {
        return this.getParentComponent();
    }

    public void addTestResult(DiagnosticTests diagnosticTest, boolean success, String description)
    {
        System.err.println(description);
    }

    public void resetProgress(int max)
    {
        setProgress(0);
        System.err.println("|<<");
    }

    public void increaseProgress()
    {
        //setProgress(idProgressBar.getValue() + 1);
        System.err.println(">>");
    }

    private void setProgress(final int progress)
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                //idProgressBar.setValue(progress);
            }
        });
    }

    public void setProgressIndeterminate()
    {
        System.err.println("???");
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                //idProgressBar.setIndeterminate(true);
            }
        });
    }

    public void update(Observable o, Object o1)
    {
        if(o!=mEidController)
            return;

        System.err.println("STATE [" + mEidController.getState().getState() + "]");

        if(mEidController.getState()==EidController.STATE.EID_PRESENT)
        {
            if(mEidController.hasIdentity())
                fillIdentity(mEidController.getIdentity(),false);
            else
               fillIdentity(null,true);

            if(mEidController.hasAddress())
                fillAddress(mEidController.getAddress(),false);
            else
                fillAddress(null,true);

            if(mEidController.hasPhoto())
                fillPhoto(mEidController.getPhoto(),false);
            else
                fillPhoto(null,true);

        }
        else
        {
            fillIdentity(null,false);
            fillAddress(null,false);
            fillPhoto(null,false);
        }
    }

    private void initOtherComponents()
    {
    }
}
